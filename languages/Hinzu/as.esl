// Grouping of metadata items
type model = decl* ;
symbol l : item* -> decl ; // Languages
symbol r : item* -> decl ; // Language representations
symbol f : item* -> decl ; // Files in the repository
symbol d : item* -> decl ; // Directories in the repository

// General metadata items
symbol id : id -> item ; // Some decls need an id
symbol name : string -> item ; // Name of an entity such as a language
symbol expansion : string -> item ; // Expansion in case the name is an acronym
symbol headline : string -> item ; // One liner explanation of the entity
symbol details : string -> item ; // An optional paragraph for explanation of the entity

// Semantic links
symbol instanceOf : link -> item ; // An entity being an instance of a classifier
symbol sameAs : link -> item ; // Identity link
symbol similarTo : link -> item ; // Weak identity link
symbol relatesTo : link -> item ; // Degenerated identity link
symbol uses : link -> item ; // An entity uses another entity
symbol facilitates : link -> item ; // A language facilitates a concept
symbol defines : link -> item ; // A file or directory defines a concept
symbol implements : link -> item ; // A file or directory implements a language
symbol supports : link -> item ; // An entity supports some entity
symbol subsetOf : link -> item ; // A language is a subset of another language
symbol supersetOf : link -> item ; // A language is a subset of another language
symbol embeds : link -> item ; // A language embeds another language
symbol dependsOn : link -> item ; // A language depends on another language
symbol linksTo : link -> item ; // Non-semantical link

// Representation-specific items
symbol extension : string -> item ; // Identify filename extension for a representation
symbol processor : goal -> item ; // Identify processor for a representation
symbol representationOf : id -> item ; // Associate representation with language
symbol reason : goal # item+ -> item ; // Guarded items for elements of representation 

// Links
symbol intern : id -> link ; // Internal references
symbol extern : reluri -> link ; // External references

// Some synonyms for clarity's sake
type id = term ; // Must be string except for representations
type goal = term ; // Prolog literals
type reluri = string ; // Relative URIs (relative to 101wiki)
